{{- if not .Values.node }}
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Release.Name }}
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "http-metrics"
spec:
  replicas: {{ .Values.replicas.app }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      # serviceAccountName: vault-auth
      containers:
        - name: {{ .Release.Name }}
          image: {{ .Values.image }}
          resources:
          {{- with .Values.resources }}
            limits:
              memory: {{ pluck $.Values.global.env .limits.memory | first | default .limits.memory._default | quote }}
              cpu: {{ pluck $.Values.global.env .limits.cpu | first | default .limits.cpu._default | quote }}
            requests:
              memory: {{ pluck $.Values.global.env .requests.memory | first | default .requests.memory._default | quote }}
              cpu: {{ pluck $.Values.global.env .requests.cpu | first | default .requests.cpu._default | quote }}
          {{- end }}
          imagePullPolicy: Always
          command: ["/bin/bash"]
          args: ["-c", "bin/blockscout eval \"Elixir.Explorer.ReleaseTasks.create_and_migrate()\" && bin/blockscout start"]
          ports:
            - containerPort: {{ .Values.docker.targetPort }}
          env:
{{- include "app_env" . | indent 10 }}
          # volumeMounts:
          #   - name: smweb-logs
          #     mountPath: /usr/local/sm-web-server/log
          readinessProbe:
            httpGet:
              path: /health
              port: {{ .Values.docker.port }}
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /health
              port: {{ .Values.docker.port }}
              scheme: HTTP
            initialDelaySeconds: 100
            periodSeconds: 100
        #   volumeMounts:
        #     - name: smweb-logs
        #       mountPath: /smweb/
        #     - name: config
        #       mountPath: /etc/promtail/config.yml
        #       subPath: config-node.yml
      # volumes:
      #   - name: smweb-logs
      #     emptyDir: { }
      #   - name: config
      #     configMap:
      #       name: {{ .Release.Name }}-promtail-configmap
      restartPolicy: Always
{{- end }}
---
{{- if .Values.node}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-geth
spec:
  serviceName: {{ .Release.Name }}-geth
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-geth
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-geth
    spec:
      containers:
      - name: {{ .Release.Name }}-geth
        image: {{ .Values.node_image }}
        args: [ "--goerli", "--gcmode='archive'", "--http", "--http.addr=0.0.0.0", "--http.api=eth,net,web3,txpool", "--ws", "--ws.addr=0.0.0.0", "--datadir=/data", ]
        # args: [ "--http", "--http.addr=0.0.0.0", "--http.vhosts=geth-mainnet-full", "--http.api=eth,net,web3,txpool", "--ws", "--ws.addr=0.0.0.0", "--datadir=/data", ]
        resources:
        {{- with .Values.node_resources }}
          limits:
            memory: {{ pluck $.Values.global.env .limits.memory | first | default .limits.memory._default | quote }}
            cpu: {{ pluck $.Values.global.env .limits.cpu | first | default .limits.cpu._default | quote }}
          requests:
            memory: {{ pluck $.Values.global.env .requests.memory | first | default .requests.memory._default | quote }}
            cpu: {{ pluck $.Values.global.env .requests.cpu | first | default .requests.cpu._default | quote }}
        {{- end }}
        env:
# {{- include "node_env" . | indent 10 }}
        ports:
        - containerPort: {{ .Values.node_port_http }}
          name: gethrpchttp
        - containerPort: {{ .Values.node_port_ws }}
          name: gethrpctcp
        - containerPort: {{ .Values.node_port_discovery }}
          name: gethdiscovery
        volumeMounts:
        - name: data
          mountPath: "/data"
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        # storageClassName: gp2
        resources:
          requests:
            storage: 1000Gi
{{- end }}
