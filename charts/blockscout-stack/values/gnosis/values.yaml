global:
  env: gnosis
# enable Blockscout deploy
blockscout:
  app: blockscout
  enabled: true
  image:
    _default: &image blockscout/blockscout:latest
  replicas:
    app: 1
  docker:
    port: 80
    targetPort: 4000
  # init container
  init:
    enabled: true
    image:
      _default: *image
  service:
    # ClusterIP, NodePort or LoadBalancer
    type: ClusterIP
  # enable ingress
  ingress:
    enabled: true
    annotations:
      - 'nginx.ingress.kubernetes.io/cors-allow-origin: "https://*.blockscout-main.test.aws-k8s.blockscout.com, https://*.test.aws-k8s.blockscout.com, http://localhost:3000"'
      - 'nginx.ingress.kubernetes.io/cors-allow-credentials: "true"'
      - 'nginx.ingress.kubernetes.io/cors-allow-methods: PUT, GET, POST, OPTIONS, DELETE, PATCH'
      - 'nginx.ingress.kubernetes.io/enable-cors: "true"'
      - 'nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,x-csrf-token"'
      # - 'nginx.ingress.kubernetes.io/rewrite-target: /$2'
    host:
      _default: blockscout-gnosis.test.aws-k8s.blockscout.com
    # enable https
    #
    tls:
      enabled: true
    path:
      prefix:
        # - "/poa/sokol(/|$)(.*)"
        - "/"
  # probes
  livenessProbe:
    enabled: true
    path: /
    params:
      initialDelaySeconds: 100
      periodSeconds: 100
  readinessProbe:
    enabled: true
    path: /
    params:
      initialDelaySeconds: 60
      periodSeconds: 10
      timeoutSeconds: 60
  resources:
    limits:
      memory:
        _default: "1Gi"
      cpu:
        _default: "1"
    requests:
      memory:
        _default: "1Gi"
      cpu:
        _default: "1"
  # enable service to connect to RDS
  rds:
    enabled: false
    endpoint:
      _default: <endpoint>.<region>.rds.amazonaws.com
  # node label
  nodeSelector:
    enabled: true
    labels:
      _default:
        app: blockscout
  # Blockscout environment variables
  environment:
    ENV:
      _default: test
    RESOURCE_MODE:
      _default: account
    PUBLIC:
      _default: 'false'
    PORT:
      _default: 4000
    PORT_PG:
      _default: 5432
    PORT_NETWORK_HTTP:
      _default: 8545
    PORT_NETWORK_WS:
      _default: 8546
    ETHEREUM_JSONRPC_VARIANT:
      _default: nethermind
    COIN:
      _default: DAI
    MIX_ENV:
      _default: prod
    ECTO_USE_SSL:
      _default: 'false'
    MICROSERVICE_SC_VERIFIER_URL:
      _default: http://sc-verifier-svc:8043
    ACCOUNT_ENABLED:
      _default: 'true'
    DISABLE_REALTIME_INDEXER:
      _default: 'false'
    BLOCKSCOUT_HOST:
      _default: 'blockscout-gnosis.test.aws-k8s.blockscout.com'
    NETWORK_PATH:
      _default: "/"
    ETHEREUM_JSONRPC_DISABLE_ARCHIVE_BALANCES:
      _default: 'true'
    APPS_MENU:
      _default: 'true'
    EXTERNAL_APPS:
      _default: '[{"title": "Marketplace", "url": "/apps"}]'
    JSON_RPC:
      _default: http://geth-svc:8545
    API_V2_ENABLED:
      _default: 'true'

postgres:
  enabled: true
  image: postgres:13.8
  port: 5432

  command: '["docker-entrypoint.sh", "-c"]'
  args: '["max_connections=300"]'

  customShm:
    enabled: false

  files:
    enabled: true
    mountPath: /docker-entrypoint-initdb.d
    list:
      init.sql: |
        CREATE DATABASE stats;
        GRANT ALL PRIVILEGES ON DATABASE stats TO postgres;

  resources:
    limits:
      memory:
        _default: "1Gi"
      cpu:
        _default: "1"
    requests:
      memory:
        _default: "1Gi"
      cpu:
        _default: "1"

  environment:
    POSTGRES_USER:
      _default: 'postgres'
    POSTGRES_HOST_AUTH_METHOD:
      _default: 'trust'
# enable Smart-contract-verifier deploy
scVerifier:
  enabled: true
  image:
    _default: ghcr.io/blockscout/smart-contract-verifier:main
  replicas:
    app: 1
  ports:
    http:
      number: 8050
      protocol: TCP
      host: 'http.'
      path: "/"
      pathType: Prefix
    grpc:
      number: 8051
      protocol: TCP
      host: 'grpc.'
      path: "/"
      pathType: Prefix
    metrics:
      number: 6060
      protocol: TCP
      host: "metrics."
      path: "/metrics"
      pathType: Exact
  service:
    # ClusterIP, NodePort or LoadBalancer
    type: ClusterIP
  # enable ingress
  ingress:
    enabled: true
    host:
      _default: verifier-gnosis.test.aws-k8s.blockscout.com
    # enable https
    tls:
      enabled: true
  resources:
    limits:
      memory:
        _default: "0.5Gi"
      cpu:
        _default: "0.25"
    requests:
      memory:
        _default: "0.5Gi"
      cpu:
        _default: "0.25"
  # node label
  nodeSelector:
    enabled: true
    labels:
      app: blockscout
  # probes
  livenessProbe:
    enabled: true
    # path: /health
  readinessProbe:
    enabled: true
    # path: /health
  # enable Horizontal Pod Autoscaler
  hpa:
    enabled: true
    minReplicas: 1
    maxReplicas: 10
    cpuTarget: 90
  environment:
    SMART_CONTRACT_VERIFIER__SERVER__HTTP__ADDR:
      _default: 0.0.0.0:8050
    SMART_CONTRACT_VERIFIER__SERVER__GRPC__ADDR:
      _default: 0.0.0.0:8051
    # SMART_CONTRACT_VERIFIER__SOLIDITY__ENABLED:
    #   _default: 'true'
    SMART_CONTRACT_VERIFIER__SOLIDITY__COMPILERS_DIR:
      _default: /tmp/solidity-compilers
    SMART_CONTRACT_VERIFIER__SOLIDITY__REFRESH_VERSIONS_SCHEDULE:
      _default: 0 0 * * * * *
    # It depends on the OS you are running the service on
    # SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__LIST__LIST_URL:
    #   _default: https://solc-bin.ethereum.org/linux-amd64/list.json
    #SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__LIST__LIST_URL=https://solc-bin.ethereum.org/macosx-amd64/list.json
    #SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__LIST__LIST_URL=https://solc-bin.ethereum.org/windows-amd64/list.json
    SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__S3__REGION:
      _default: ""
    SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__S3__ENDPOINT:
      _default: https://storage.googleapis.com
    SMART_CONTRACT_VERIFIER__SOURCIFY__ENABLED:
      _default: 'true'
    SMART_CONTRACT_VERIFIER__SOURCIFY__API_URL:
      _default: https://sourcify.dev/server/
    SMART_CONTRACT_VERIFIER__SOURCIFY__VERIFICATION_ATTEMPTS:
      _default: 3
    SMART_CONTRACT_VERIFIER__SOURCIFY__REQUEST_TIMEOUT:
      _default: 10
    SMART_CONTRACT_VERIFIER__METRICS__ENABLED:
      _default: 'true'
    SMART_CONTRACT_VERIFIER__METRICS__ADDR:
      _default: 0.0.0.0:6060
    SMART_CONTRACT_VERIFIER__METRICS__ROUTE:
      _default: /metrics
    SMART_CONTRACT_VERIFIER__JAEGER__ENABLED:
      _default: 'false'

# enable stats deploy
stats:
  enabled: true
  image:
    _default: ghcr.io/blockscout/stats:main

  replicas:
    app: 1
  docker:
    port: 80
    targetPort: 8050
    metricsPort: 6060

  service:
    # ClusterIP, NodePort or LoadBalancer
    type: ClusterIP

  # enable ingress
  ingress:
    enabled: true
    annotations:
      - 'nginx.ingress.kubernetes.io/cors-allow-origin: "https://*.blockscout-main.test.aws-k8s.blockscout.com, https://*.test.aws-k8s.blockscout.com, https://*.blockscout.com, http://localhost:3000"'
      - 'nginx.ingress.kubernetes.io/cors-allow-credentials: "true"'
      - 'nginx.ingress.kubernetes.io/cors-allow-methods: PUT, GET, POST, OPTIONS, DELETE, PATCH'
      - 'nginx.ingress.kubernetes.io/enable-cors: "true"'
    host:
      _default: stats-gnosis.test.aws-k8s.blockscout.com
    # enable https
    tls:
      enabled: true

  resources:
    limits:
      memory:
        _default: "0.5Gi"
      cpu:
        _default: "0.25"
    requests:
      memory:
        _default: "0.5Gi"
      cpu:
        _default: "0.25"

  # node label
  nodeSelector:
    enabled: true
    app: blockscout

  environment:
    RUST_LOG:
      _default: info
    STATS__RUN_MIGRATIONS:
      _default: true
    STATS__TRACING__FORMAT:
      _default: json
    STATS__METRICS__ENABLED:
      _default: true

frontend:
  app: blockscout
  enabled: true
  image:
    _default: ghcr.io/blockscout/frontend:main
  replicas:
    app: 1
  docker:
    port: 80
    targetPort: 3000
  ingress:
    enabled: true
    # annotations:
    #   - 'nginx.ingress.kubernetes.io/use-regex: "true"'
    host:
      _default: blockscout-gnosis.test.aws-k8s.blockscout.com
    # enable https
    tls:
      enabled: true
    path:
      exact:
        # - "/(apps|auth/profile|account)"
        - "/"
      prefix:
      # - "/(apps|auth/profile|account)"
        - "/account"
        - "/apps"
        - "/_next"
        - "/node-api"
        - "/static"
        - "/auth/profile"
        - "/txs"
        - "/tx"
        - "/blocks"
        - "/block"
        - "/login"
        - "/address"
        - "/stats"
        - "/token"
  resources:
    limits:
      memory:
        _default: "0.3Gi"
      cpu:
        _default: "0.2"
    requests:
      memory:
        _default: "0.3Gi"
      cpu:
        _default: "0.2"
  # node label
  nodeSelector:
    enabled: true
    labels:
      app: blockscout
  environment:
    NEXT_PUBLIC_BLOCKSCOUT_VERSION:
      _default: v4.1.8-beta
    NEXT_PUBLIC_FOOTER_GITHUB_LINK:
      _default: https://github.com/blockscout/blockscout
    NEXT_PUBLIC_FOOTER_TWITTER_LINK:
      _default: https://www.twitter.com/blockscoutcom
    NEXT_PUBLIC_APP_ENV:
      _default: preview
    NEXT_PUBLIC_APP_INSTANCE:
      _default: unknown
    NEXT_PUBLIC_FOOTER_TELEGRAM_LINK:
      _default: https://t.me/poa_network
    NEXT_PUBLIC_FOOTER_STAKING_LINK:
      _default: https://duneanalytics.com/maxaleks/xdai-staking
    NEXT_PUBLIC_NETWORK_NAME:
      _default: Sokol
    NEXT_PUBLIC_NETWORK_SHORT_NAME:
      _default: POA
    NEXT_PUBLIC_NETWORK_ASSETS_PATHNAME:
      _default: poa
    NEXT_PUBLIC_NETWORK_TYPE:
      _default: poa_core
    NEXT_PUBLIC_NETWORK_ID:
      _default: 77
    NEXT_PUBLIC_NETWORK_CURRENCY_NAME:
      _default: POA Network Sokol
    NEXT_PUBLIC_NETWORK_CURRENCY_SYMBOL:
      _default: SPOA
    NEXT_PUBLIC_NETWORK_CURRENCY_DECIMALS:
      _default: 18
    NEXT_PUBLIC_NETWORK_VERIFICATION_TYPE:
      _default: validation
    NEXT_PUBLIC_IS_ACCOUNT_SUPPORTED:
      _default: 'true'
    NEXT_PUBLIC_FEATURED_NETWORKS:
      _default: "[{'title':'Gnosis Chain','url':'https://blockscout.com/xdai/mainnet','group':'mainnets','type':'xdai_mainnet'},{'title':'Optimism on Gnosis Chain','url':'https://blockscout.com/xdai/optimism','group':'mainnets','icon':'https://www.fillmurray.com/60/60','type':'xdai_optimism'},{'title':'Arbitrum on xDai','url':'https://blockscout.com/xdai/aox','group':'mainnets'},{'title':'Ethereum','url':'https://blockscout.com/eth/mainnet','group':'mainnets','type':'eth_mainnet'},{'title':'Ethereum Classic','url':'https://blockscout.com/etx/mainnet','group':'mainnets','type':'etc_mainnet'},{'title':'POA','url':'https://blockscout.com/poa/core','group':'mainnets','type':'poa_core'},{'title':'RSK','url':'https://blockscout.com/rsk/mainnet','group':'mainnets','type':'rsk_mainnet'},{'title':'Gnosis Chain Testnet','url':'https://blockscout.com/xdai/testnet','group':'testnets','type':'xdai_testnet'},{'title':'POA Sokol','url':'https://blockscout.com/poa/sokol','group':'testnets','type':'poa_sokol'},{'title':'ARTIS Σ1','url':'https://blockscout.com/artis/sigma1','group':'other','type':'artis_sigma1'},{'title':'LUKSO L14','url':'https://blockscout.com/lukso/l14','group':'other','type':'lukso_l14'},{'title':'Astar','url':'https://blockscout.com/astar','group':'other','type':'astar'}]"
    NEXT_PUBLIC_API_HOST:
      _default: blockscout-gnosis.test.aws-k8s.blockscout.com
    NEXT_PUBLIC_APP_HOST:
      _default: blockscout-gnosis.test.aws-k8s.blockscout.com
    NEXT_PUBLIC_API_BASE_PATH:
      _default: /
    NEXT_PUBLIC_MARKETPLACE_SUBMIT_FORM:
      _default: https://airtable.com/shrqUAcjgGJ4jU88C
    NEXT_PUBLIC_MARKETPLACE_APP_LIST:
      _default: "[{'author': 'Blockscout', 'id': 'token-approval-tracker', 'title': 'Token Approval Tracker', 'logo': 'https://approval-tracker.apps.blockscout.com/icon-192.png', 'categories': ['security', 'tools'], 'shortDescription': 'Token Approval Tracker shows all approvals for any ERC20-compliant tokens and NFTs and lets to revoke them or adjust the approved amount.', 'site': 'https://docs.blockscout.com/for-users/blockscout-apps/token-approval-tracker', 'description': 'Token Approval Tracker shows all approvals for any ERC20-compliant tokens and NFTs and lets to revoke them or adjust the approved amount.', 'url': 'https://approval-tracker.apps.blockscout.com/'},{'author': 'Revoke', 'id': 'revoke.cash', 'title':'Revoke.cash', 'logo': 'https://revoke.cash/assets/images/revoke.svg', 'categories': ['security', 'tools'], 'shortDescription': 'Revoke.cash comes in as a preventative tool to manage your token allowances and practice proper wallet hygiene. By regularly revoking active allowances you reduce the chances of becoming the victim of allowance exploits.', 'site': 'https://revoke.cash/about', 'description': 'Revoke.cash comes in as a preventative tool to manage your token allowances and practice proper wallet hygiene. By regularly revoking active allowances you reduce the chances of becoming the victim of allowance exploits.', 'url': 'https://revoke.cash/'},{'author': 'Hop', 'id': 'hop-exchange', 'title': 'Hop', 'logo': 'https://goerli.hop.exchange/static/media/hop-logo-black.36655970.svg', 'categories': ['tools'], 'shortDescription': 'Hop is a scalable rollup-to-rollup general token bridge. It allows users to send tokens from one rollup or sidechain to another almost immediately without having to wait for the networks challenge period.', 'site': 'https://help.hop.exchange/hc/en-us/articles/4405172445197-What-is-Hop-Protocol-', 'description': 'Hop is a scalable rollup-to-rollup general token bridge. It allows users to send tokens from one rollup or sidechain to another almost immediately without having to wait for the networks challenge period.', 'url': 'https://goerli.hop.exchange'}, {'author': 'Aave', 'id': 'aave', 'title': 'Aave', 'logo': 'https://staging.aave.com/aaveLogo.svg', 'categories': ['tools'], 'shortDescription': 'Aave is a decentralised non-custodial liquidity market protocol where users can participate as suppliers or borrowers. Suppliers provide liquidity to the market to earn a passive income, while borrowers are able to borrow in an overcollateralised (perpetually) or undercollateralised (one-block liquidity) fashion.', 'site': 'https://docs.aave.com/faq/', 'description': 'Aave is a decentralised non-custodial liquidity market protocol where users can participate as suppliers or borrowers. Suppliers provide liquidity to the market to earn a passive income, while borrowers are able to borrow in an overcollateralised (perpetually) or undercollateralised (one-block liquidity) fashion.', 'url': 'https://staging.aave.com/'}]"
    NEXT_PUBLIC_LOGOUT_URL:
      _default: https://blockscoutcom.us.auth0.com/v2/logout
    NEXT_PUBLIC_LOGOUT_RETURN_URL:
      _default: http://blockscout-gnosis.test.aws-k8s.blockscout.com/auth/logout
    NEXT_PUBLIC_STATS_API_HOST:
      _default: https://stats-gnosis.test.aws-k8s.blockscout.com
# enable blockscout-allowance
allowance:
  enabled: false

  image:
    _default: ghcr.io/blockscout/blockscout-allowance:main

  replicas:
    app: 1
  docker:
    port: 80
    targetPort: 3000

  service:
    # ClusterIP, NodePort or LoadBalancer
    type: ClusterIP

  ingress:
    enabled: true
    annotations: {}
    host:
      _default: blockscout-allowance.apps.aws-k8s.blockscout.com
    # enable https
    tls:
      enabled: true
      createSecret: false
    path:
      prefix:
        - "/"
      exact: {}

  resources:
    limits:
      memory:
        _default: "0.3Gi"
      cpu:
        _default: "0.2"
    requests:
      memory:
        _default: "0.3Gi"
      cpu:
        _default: "0.2"

  # node label
  nodeSelector:
    enabled: true
    labels:
      _default:
        app: blockscout

  environment: {}

# enable visualizer deploy
visualizer:
  enabled: true
  image:
    _default: ghcr.io/blockscout/visualizer:latest

  replicas:
    app: 1
  docker:
    port: 80
    targetPort: 8050
    # metricsPort: 6060

  service:
    # ClusterIP, NodePort or LoadBalancer
    type: ClusterIP

  # enable ingress
  ingress:
    enabled: true
    host:
      _default: visualizer-gnosis.test.aws-k8s.blockscout.com
    # enable https
    tls:
      enabled: true
      createSecret: false

  resources:
    limits:
      memory:
        _default: "0.05Gi"
      cpu:
        _default: "0.05"
    requests:
      memory:
        _default: "0.05Gi"
      cpu:
        _default: "0.05"

  # node label
  nodeSelector:
    enabled: true
    labels:
      _default:
        app: blockscout

  # probes
  livenessProbe:
    enabled: true
    path: /health
  readinessProbe:
    enabled: true
    path: /health

  # enable Horizontal Pod Autoscaler
  hpa:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    cpuTarget: 90

  environment:
    VISUALIZER__SERVER__HTTP__ENABLED:
      _default: 'true'
    VISUALIZER__SERVER__HTTP__ADDR:
      _default: 0.0.0.0:8050
    VISUALIZER__SERVER__GRPC__ENABLED:
      _default: 'false'
