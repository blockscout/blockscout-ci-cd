global:
  env: testnet

# enable Blockscout deploy
blockscout:
  enabled: false
  image:
    _default: blockscout/blockscout:latest

  replicas:
    app: 1
  docker:
    port: 80
    targetPort: 4000

  # init container
  init:
    enabled: false

  service:
    # ClusterIP, NodePort or LoadBalancer
    type: ClusterIP

  command: '["/bin/bash"]'
  args: '["-c", "bin/blockscout eval \"Elixir.Explorer.ReleaseTasks.create_and_migrate()\" && bin/blockscout start"]'

  # enable ingress
  ingress:
    enabled: false
    host:
      _default: <url>
    # enable https
    tls:
      enabled: false

  # probes
  livenessProbe:
    enabled: true
    path: /
  readinessProbe:
    enabled: true
    path: /

  resources:
    limits:
      memory:
        _default: "1Gi"
      cpu:
        _default: "0.5"
    requests:
      memory:
        _default: "1Gi"
      cpu:
        _default: "0.5"

  # enable service to connect to RDS
  rds:
    enable: false
    endpoint:
      _default: <endpoint>.<region>.rds.amazonaws.com

  # node label
  nodeSelector:
    enabled: true
    app: blockscout

  # Blockscout environment variables
  environment: {}

postgres:
  enabled: false
  image: postgres:13.6
  port: 5432

  args:

  resources:
    limits:
      memory:
        _default: "1Gi"
      cpu:
        _default: "0.2"
    requests:
      memory:
        _default: "1Gi"
      cpu:
        _default: "0.2"

  environment: {}
    # POSTGRES_USER:
    #   _default:
    # POSTGRES_PASSWORD:
    #   _default:
    # POSTGRES_DB:
    #   _default:

# enable Node (geth) deploy
node:
  enabled: false
  image:
    _default: ethereum/client-go:stable

  replicas:
    app: 1

  portHttp: 8545
  portWs: 8546
  portDiscovery: 30303

  environment: {}

  persistence:
    enabled: false

  command: '["sh","./root/init.sh"]'
  args: ''

  resources:
    limits:
      memory:
        _default: "6Gi"
      cpu:
        _default: "3"
    requests:
      memory:
        _default: "6Gi"
      cpu:
        _default: "3"

  # node label
  nodeSelector:
    enabled: true
    app: blockscout

  service:
    # ClusterIP, NodePort or LoadBalancer
    type: ClusterIP

  # enable ingress
  ingress:
    enabled: false
    host:
    # enable https
    tls:
      enabled: false

  files:
    genesis: ''
    init: ''

# enable Smart-contract-verifier deploy
scVerifier:
  enabled: false
  image:
    _default: ghcr.io/blockscout/smart-contract-verifier:latest

  replicas:
    app: 1
  docker:
    port: 80
    targetPort: 8043
    metricsPort: 6060

  service:
    # ClusterIP, NodePort or LoadBalancer
    type: ClusterIP

  # enable ingress
  ingress:
    enabled: false
    host:
      _default: <url>
    # enable https
    tls:
      enabled: false

  resources:
    limits:
      memory:
        _default: "0.5Gi"
      cpu:
        _default: "0.25"
    requests:
      memory:
        _default: "0.5Gi"
      cpu:
        _default: "0.25"

  # node label
  nodeSelector:
    enabled: true
    app: blockscout

  # probes
  livenessProbe:
    enabled: true
    path: /health
  readinessProbe:
    enabled: true
    path: /health

  # enable Horizontal Pod Autoscaler
  hpa:
    enabled: true
    minReplicas: 1
    maxReplicas: 10
    cpuTarget: 90

  environment:
    SMART_CONTRACT_VERIFIER__SERVER__ADDR:
      _default: 0.0.0.0:8043
    SMART_CONTRACT_VERIFIER__SOLIDITY__ENABLED:
      _default: 'true'
    SMART_CONTRACT_VERIFIER__SOLIDITY__COMPILERS_DIR:
      _default: /tmp/solidity-compilers
    SMART_CONTRACT_VERIFIER__SOLIDITY__REFRESH_VERSIONS_SCHEDULE:
      _default: 0 0 * * * * *

    # It depends on the OS you are running the service on
    # SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__LIST__LIST_URL:
    #   _default: https://solc-bin.ethereum.org/linux-amd64/list.json
    #SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__LIST__LIST_URL=https://solc-bin.ethereum.org/macosx-amd64/list.json
    #SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__LIST__LIST_URL=https://solc-bin.ethereum.org/windows-amd64/list.json

    SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__S3__ACCESS_KEY:
      _default:
    SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__S3__SECRET_KEY:
      _default:
    SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__S3__REGION:
      _default: ""
    SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__S3__ENDPOINT:
      _default:
    SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__S3__BUCKET:
      _default:

    SMART_CONTRACT_VERIFIER__SOURCIFY__ENABLED:
      _default: 'true'
    SMART_CONTRACT_VERIFIER__SOURCIFY__API_URL:
      _default:
    SMART_CONTRACT_VERIFIER__SOURCIFY__VERIFICATION_ATTEMPTS:
      _default: 3
    SMART_CONTRACT_VERIFIER__SOURCIFY__REQUEST_TIMEOUT:
      _default: 10

    SMART_CONTRACT_VERIFIER__METRICS__ENABLED:
      _default: 'true'
    SMART_CONTRACT_VERIFIER__METRICS__ADDR:
      _default: 0.0.0.0:6060
    SMART_CONTRACT_VERIFIER__METRICS__ROUTE:
      _default: /metrics

    SMART_CONTRACT_VERIFIER__JAEGER__ENABLED:
      _default: 'false'
    SMART_CONTRACT_VERIFIER__JAEGER__AGENT_ENDPOINT:
      _default:

frontend:
  enabled: false

  image:
    _default: ghcr.io/blockscout/frontend:main

  replicas:
    app: 1
  docker:
    port: 80
    targetPort: 3000

  ingress:
    enabled: true
    host:
      _default: blockscout-frontend.aws-k8s.blockscout.com

  resources:
    limits:
      memory:
        _default: "0.3Gi"
      cpu:
        _default: "0.2"
    requests:
      memory:
        _default: "0.3Gi"
      cpu:
        _default: "0.2"

  # node label
  nodeSelector:
    enabled: true
    app: blockscout

  environment:
    NEXT_PUBLIC_BLOCKSCOUT_VERSION:
      _default: v4.1.7-beta
    NEXT_PUBLIC_FOOTER_GITHUB_LINK:
      _default: https://github.com/blockscout/blockscout
    NEXT_PUBLIC_FOOTER_TWITTER_LINK:
      _default: https://www.twitter.com/blockscoutcom
    NEXT_PUBLIC_FOOTER_TELEGRAM_LINK:
      _default: https://t.me/poa_network
    NEXT_PUBLIC_FOOTER_STAKING_LINK:
      _default: https://duneanalytics.com/maxaleks/xdai-staking
    NEXT_PUBLIC_SUPPORTED_NETWORKS:
      _default: [{"name":"Gnosis Chain","type":"xdai","subType":"mainnet","group":"mainnets","isAccountSupported":true},{"name":"Optimism on Gnosis Chain","type":"xdai","subType":"optimism","group":"mainnets"},{"name":"Arbitrum on xDai","type":"xdai","subType":"aox","group":"mainnets"},{"name":"Ethereum","type":"eth","subType":"mainnet","group":"mainnets"},{"name":"Ethereum Classic","type":"etc","subType":"mainnet","group":"mainnets"},{"name":"POA","type":"poa","subType":"core","group":"mainnets"},{"name":"RSK","type":"rsk","subType":"mainnet","group":"mainnets"},{"name":"Gnosis Chain Testnet","type":"xdai","subType":"testnet","group":"testnets","isAccountSupported":true},{"name":"POA Sokol","type":"poa","subType":"sokol","group":"testnets"},{"name":"ARTIS Î£1","type":"artis","subType":"sigma1","group":"other"},{"name":"LUKSO L14","type":"lukso","subType":"l14","group":"other"}]
