global:
  env: testnet

# enable Blockscout deploy
blockscout:
  enabled: false
  image:
    _default: blockscout/blockscout:latest

  replicas:
    app: 1
  docker:
    port: 80
    targetPort: 4000

  service:
    # ClusterIP, NodePort or LoadBalancer
    type: ClusterIP

  # enable ingress
  ingress:
    enabled: false
    host:
      _default: <url>
    # enable https
    tls:
      enabled: false

  # probes
  livenessProbe:
    enabled: true
    path: /
  readinessProbe:
    enabled: true
    path: /

  resources:
    limits:
      memory:
        _default: "1Gi"
      cpu:
        _default: "0.5"
    requests:
      memory:
        _default: "1Gi"
      cpu:
        _default: "0.5"

  # enable service to connect to RDS
  rds:
    enable: false
    endpoint:
      _default: <endpoint>.<region>.rds.amazonaws.com

  # node label
  nodeSelector:
    enabled: true
    app: blockscout

  # Blockscout environment variables
  environment: {}

# enable Node (geth) deploy
node:
  enabled: false
  image:
    _default: ethereum/client-go:stable

  replicas:
    app: 1

  portHttp: 8545
  portWs: 8546
  portDiscovery: 30303

  environment: {}

  resources:
    limits:
      memory:
        _default: "6Gi"
      cpu:
        _default: "3"
    requests:
      memory:
        _default: "6Gi"
      cpu:
        _default: "3"

  # node label
  nodeSelector:
    enabled: true
    app: blockscout

  service:
    # ClusterIP, NodePort or LoadBalancer
    type: ClusterIP

  # enable ingress
  ingress:
    enabled: false
    host:
    # enable https
    tls:
      enabled: false

client:

  # node label
  nodeSelector:
    app: blockscout

  enabled: false
  # Default values for eth2-teku.
  # This is a YAML-formatted file.

  # Kubernetes namespace for Teku beacon chain and validator client deployments, services, secrets, etc.
  namespace: optimism-goerli

  # Specify which Ethereum 2.0 testnet to use. If the target network is mainnet, leave this field blank.
  ethereumTestnet: goerli

  # A required field that determines the persistent storage type. Default to nfs.
  # Available options: nfs and hostPath.
  persistentVolumeType: "hostPath"

  # NFS configurations. Only need to fill this section when persistentVolumeType is set to "nfs".
  nfs:
    # IP address of the NFS server.
    serverIp: 172.20.10.10

  # Local folder to store logs and other data.
  # See https://docs.teku.consensys.net/en/latest/HowTo/Monitor/Logging/ for more info.
  localDirPath: /data/teku/local

  securityContext:
    # The user ID will be used to run all processes in the container. The user should have the access to the mounted volume.
    # All directories and files created with the processes are owned by this user.
    runAsUser: 1001
    # The group ID will be used to run all processes in the container. The group should have the access to the mounted volume.
    # If this field is not set, the group ID of the processes will be 0, which means they will have root access.
    # See https://kubernetes.io/docs/tasks/configure-pod-container/security-context/ for more info.
    #
    # All directories and files created with the processes are owned by this group.
    runAsGroup: 2000

  # A required section that configures image registry, image name and version tag for beacon chain and validator client.
  # Teku currently pushes images to:
  #   Docker Hub: https://hub.docker.com/r/consensys/teku
  image:
    # The image registry of beacon chain:
    #   Docker Hub: index.docker.io/consensys/teku
    beaconImage: index.docker.io/consensys/teku
    # The image registry of validator:
    #   Docker Hub: index.docker.io/consensys/teku
    validatorImage: index.docker.io/consensys/teku
    # Teku release version.
    # Check https://github.com/consensys/teku/releases for more info.
    versionTag: 22.4.0

  # A required section that contains beacon chain information.
  beacon:
    # This field specifies the name and label for beacon chain deployment, container and service.
    name: beacon
    # The path to the beacon chain data directory.
    # If persistentVolumeType is set to "nfs", this variable represents the data volume path on NFS.
    # If the type is set to "hostPath", it represents the volume path on the host node.
    dataDirPath: /data/teku/beacon
    # Ethereum 1 node endpoints.
    eth1Endpoints:
      - http://127.0.0.1:8545
      - http://127.0.0.1:8546
      - http://127.0.0.1:8547
    # TCP and UDP port opened for P2P connection with the beacon node.
    # See https://docs.teku.consensys.net/en/latest/Reference/CLI/CLI-Syntax/#p2p-port for more info.
    p2pPort: 9000
    # An optional flag to enable syncing from a recent finalized checkpoint instead of syncing from genesis.
    # To enable this functionality, set this flag to another synced beacon node and delete the existing beacon database.
    # Check https://docs.teku.consensys.net/en/latest/HowTo/Get-Started/Checkpoint-Start/ for more info.
    # checkpointSyncURL: https://<PROJECT-ID>:<PROJECT-SECRET>@eth2-beacon-mainnet.infura.io/eth/v2/debug/beacon/states/finalized

  # This field determines how long it will wait before the validator client starts or restarts.
  # It's a way to protect the validator client from double attesting or block proposing when the DB is out-of-date.
  validatorStartWaitTime: 780

  # A required section that contains information for all validator clients
  validatorClients:
    # This section contains information for one validator client.
    # "validatorClient1" is the name of this validator client section. You can change it to other strings as long as it's different than other section names.
    validatorClient1:
      # This field specifies the name and label for validator client deployment, container and service.
      name: validator-client-1
      # The path to the validator client data directory.
      # If persistentVolumeType is set to "nfs", this variable represents the data volume path on NFS.
      # If the type is set to "hostPath", it represents the volume path on the host node.
      # It's recommended to have different value for each validator client to avoid using the wrong validator client data.
      dataDirPath: /data/teku/validator-client-1
      # The path to the validator keys directory.
      # It's recommended to have different value for each validator client to avoid using the wrong validator keys.
      validatorKeysDirPath: /data/teku/validator-keys-1
      # The path to the validator key passwords directory.
      # It's recommended to have different value for each validator client to avoid using the wrong validator key passwords.
      validatorKeyPasswordsDirPath: /data/teku/validator-key-passwords-1
      # A mark you want to leave each time the validator client proposes a block.
      # It can be a message or a pixel (on the graffiti wall).
      # See https://beaconcha.in/charts/graffiti_wordcloud for example.
      graffiti: "eth2 x k8s"

    # You can add more validator clients below. The name of a new validator client section can be validatorClient2 or anything else that you prefer
    # as long as the section has the same indentation as other validator client sections and contains all the fields under the section name, e.g.
    # validatorClient2:
    #   name: validator-client-2
    #   dataDirPath: /data/teku/validator-client-2
    #   validatorKeysDirPath: /data/teku/validator-keys-2
    #   validatorKeyPasswordsDirPath: /data/teku/validator-key-passwords-2
    #   graffiti: "eth2 x k8s"


# enable Smart-contract-verifier deploy
scVerifier:
  enabled: false
  image:
    _default: ghcr.io/blockscout/smart-contract-verifier:latest

  replicas:
    app: 1
  docker:
    port: 80
    targetPort: 8043
    metricsPort: 6060

  service:
    # ClusterIP, NodePort or LoadBalancer
    type: ClusterIP

  # enable ingress
  ingress:
    enabled: false
    host:
      _default: <url>
    # enable https
    tls:
      enabled: false

  resources:
    limits:
      memory:
        _default: "0.5Gi"
      cpu:
        _default: "0.25"
    requests:
      memory:
        _default: "0.5Gi"
      cpu:
        _default: "0.25"

  # node label
  nodeSelector:
    enabled: true
    app: blockscout

  # probes
  livenessProbe:
    enabled: true
    path: /health
  readinessProbe:
    enabled: true
    path: /health

  # enable Horizontal Pod Autoscaler
  hpa:
    enabled: true
    minReplicas: 1
    maxReplicas: 10
    cpuTarget: 90

  environment:
    SMART_CONTRACT_VERIFIER__SERVER__ADDR:
      _default: 0.0.0.0:8043
    SMART_CONTRACT_VERIFIER__SOLIDITY__ENABLED:
      _default: 'true'
    SMART_CONTRACT_VERIFIER__SOLIDITY__COMPILERS_DIR:
      _default: /tmp/solidity-compilers
    SMART_CONTRACT_VERIFIER__SOLIDITY__REFRESH_VERSIONS_SCHEDULE:
      _default: 0 0 * * * * *

    # It depends on the OS you are running the service on
    # SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__LIST__LIST_URL:
    #   _default: https://solc-bin.ethereum.org/linux-amd64/list.json
    #SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__LIST__LIST_URL=https://solc-bin.ethereum.org/macosx-amd64/list.json
    #SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__LIST__LIST_URL=https://solc-bin.ethereum.org/windows-amd64/list.json

    SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__S3__ACCESS_KEY:
      _default:
    SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__S3__SECRET_KEY:
      _default:
    SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__S3__REGION:
      _default: ""
    SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__S3__ENDPOINT:
      _default:
    SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__S3__BUCKET:
      _default:

    SMART_CONTRACT_VERIFIER__SOURCIFY__ENABLED:
      _default: 'true'
    SMART_CONTRACT_VERIFIER__SOURCIFY__API_URL:
      _default:
    SMART_CONTRACT_VERIFIER__SOURCIFY__VERIFICATION_ATTEMPTS:
      _default: 3
    SMART_CONTRACT_VERIFIER__SOURCIFY__REQUEST_TIMEOUT:
      _default: 10

    SMART_CONTRACT_VERIFIER__METRICS__ENABLED:
      _default: 'true'
    SMART_CONTRACT_VERIFIER__METRICS__ADDR:
      _default: 0.0.0.0:6060
    SMART_CONTRACT_VERIFIER__METRICS__ROUTE:
      _default: /metrics

    SMART_CONTRACT_VERIFIER__JAEGER__ENABLED:
      _default: 'false'
    SMART_CONTRACT_VERIFIER__JAEGER__AGENT_ENDPOINT:
      _default:

frontend:
  enabled: false

  image:
    _default: ghcr.io/blockscout/frontend:main

  replicas:
    app: 1
  docker:
    port: 80
    targetPort: 3000

  ingress:
    enabled: true
    host:
      _default: blockscout-frontend.aws-k8s.blockscout.com

  resources:
    limits:
      memory:
        _default: "0.3Gi"
      cpu:
        _default: "0.2"
    requests:
      memory:
        _default: "0.3Gi"
      cpu:
        _default: "0.2"

  # node label
  nodeSelector:
    enabled: true
    app: blockscout

  environment:
    NEXT_PUBLIC_BLOCKSCOUT_VERSION:
      _default: v4.1.7-beta
    NEXT_PUBLIC_FOOTER_GITHUB_LINK:
      _default: https://github.com/blockscout/blockscout
    NEXT_PUBLIC_FOOTER_TWITTER_LINK:
      _default: https://www.twitter.com/blockscoutcom
    NEXT_PUBLIC_FOOTER_TELEGRAM_LINK:
      _default: https://t.me/poa_network
    NEXT_PUBLIC_FOOTER_STAKING_LINK:
      _default: https://duneanalytics.com/maxaleks/xdai-staking
    NEXT_PUBLIC_SUPPORTED_NETWORKS:
      _default: [{"name":"Gnosis Chain","type":"xdai","subType":"mainnet","group":"mainnets","isAccountSupported":true},{"name":"Optimism on Gnosis Chain","type":"xdai","subType":"optimism","group":"mainnets"},{"name":"Arbitrum on xDai","type":"xdai","subType":"aox","group":"mainnets"},{"name":"Ethereum","type":"eth","subType":"mainnet","group":"mainnets"},{"name":"Ethereum Classic","type":"etc","subType":"mainnet","group":"mainnets"},{"name":"POA","type":"poa","subType":"core","group":"mainnets"},{"name":"RSK","type":"rsk","subType":"mainnet","group":"mainnets"},{"name":"Gnosis Chain Testnet","type":"xdai","subType":"testnet","group":"testnets","isAccountSupported":true},{"name":"POA Sokol","type":"poa","subType":"sokol","group":"testnets"},{"name":"ARTIS Σ1","type":"artis","subType":"sigma1","group":"other"},{"name":"LUKSO L14","type":"lukso","subType":"l14","group":"other"}]
