name: E2E K8s Account
on:
  push:
  workflow_dispatch:
    inputs:
      blockscout_image:
        description: 'Blockscout image:tag to test'
        required: true
        default: 'blockscout/blockscout-account:latest'
        type: string
      verification_image:
        description: 'Verification image:tag to test'
        required: true
        default: 'ghcr.io/blockscout/verification:latest'
        type: string
      environment:
        description: 'Environment to run tests against'
        required: true
        type: choice
        default: 'test'
        options:
        - prod
        - test
  workflow_call:
    inputs:
      blockscout_image:
        description: 'Blockscout image:tag to test'
        required: true
        default: 'blockscout/blockscout-account:latest'
        type: string
      verification_image:
        description: 'Verification image:tag to test'
        required: true
        default: 'ghcr.io/blockscout/verification:latest'
        type: string
      environment:
        description: 'Environment to run tests against'
        required: true
        type: string
        default: 'test'

env:
  K8S_LOCAL_PORT: ${{ secrets.K8S_LOCAL_PORT }}
  K8S_HOST: ${{ secrets.K8S_HOST }}
  BASTION_HOST: ${{ secrets.BASTION_HOST }}
  K8S_PORT: ${{ secrets.K8S_PORT }}
  USERNAME: ${{ secrets.USERNAME }}
  BASTION_SSH_KEY: ${{secrets.BASTION_SSH_KEY}}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  RESOURCE_MODE: account
  PUBLIC: false

  PORT: 4000
  PORT_PG: 6432
  PORT_NETWORK_HTTP: 9544
  PORT_NETWORK_WS: 9546

  LOAD_AUTH_CTX: 0
  ACCOUNT_USERNAME: ${{ secrets.ACCOUNT_USERNAME }}
  ACCOUNT_PASSWORD: ${{ secrets.ACCOUNT_PASSWORD }}
  MAILSLURP_API_KEY: ${{ secrets.MAILSLURP_API_KEY }}
  MAILSLURP_EMAIL_ID: ${{ secrets.MAILSLURP_EMAIL_ID }}

  IMAGE: blockscout/blockscout-account:latest
  VERIFICATION_SERVICE_IMAGE: ghcr.io/blockscout/verification:latest
  VARIANT: geth
  HTTP_URL: http://localhost:9544
  WS_URL: ws://localhost:9546
  ETHEREUM_JSONRPC_TRACE_URL: http://localhost:9544
  COIN: DAI

  AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
  AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
  AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
  AUTH0_CALLBACK_URL: ${{ secrets.AUTH0_CALLBACK_URL }}
  AUTH0_LOGOUT_RETURN_URL: ${{ secrets.AUTH0_LOGOUT_RETURN_URL }}
  AUTH0_LOGOUT_URL: ${{ secrets.AUTH0_LOGOUT_URL }}
  SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
  SENDGRID_SENDER: ${{ secrets.SENDGRID_SENDER }}
  SENDGRID_TEMPLATE: ${{ secrets.SENDGRID_TEMPLATE }}
  PUBLIC_TAGS_AIRTABLE_URL: ${{ secrets.PUBLIC_TAGS_AIRTABLE_URL }}
  PUBLIC_TAGS_AIRTABLE_API_KEY: ${{ secrets.PUBLIC_TAGS_AIRTABLE_API_KEY }}
  SOCKET_ROOT: "/"
  NETWORK_PATH: "/"
  SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
  SECRET_KEY_GUARDIAN: ${{ secrets.SECRET_KEY_GUARDIAN }}

  ENV: test
  NETWORK_URL: http://localhost:8544
  WALLET: ${{ secrets.WALLET }}

  ENABLE_RUST_VERIFICATION_SERVICE: true
  RUST_VERIFICATION_SERVICE_URL: http://0.0.0.0:8043

  SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__S3__ACCESS_KEY: ${{ secrets.SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__S3__ACCESS_KEY }}
  SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__S3__SECRET_KEY: ${{ secrets.SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__S3__SECRET_KEY }}

jobs:
  test:
    name: Test E2E contract interaction
    runs-on: ubuntu-latest
    steps:
    - name: Collect Workflow Telemetry
      uses: runforesight/foresight-workflow-kit-action@v1
      with:
        api_key: ${{ secrets.THUNDRA_APIKEY }}
    - name: checkout
      uses: actions/checkout@v2
      with:
        repository: blockscout/blockscout-ci-cd
        path: blockscout-ci-cd
    - name: Setup node
      uses: actions/setup-node@v3
      with:
        node-version: v14.17.0
    - name: Add inputs to GITHUB_ENV
      if: "${{ inputs.blockscout_image != '' && inputs.environment != '' }}"
      run: |
        echo "IMAGE=${{ inputs.blockscout_image }}" >> $GITHUB_ENV
        echo "VERIFICATION_SERVICE_IMAGE=${{ inputs.verification_image }}" >> $GITHUB_ENV
        echo "ENV=${{ inputs.environment }}" >> $GITHUB_ENV
    - name: Cache node modules
      id: cache-npm
      uses: actions/cache@v3
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: Install deps
      run: npm ci
    - name: Lint
      run: npm run lint
    - name: Build contracts
      working-directory: blockscout-ci-cd/tests/contracts
      run: |
        # gyp build from root
        npm config set user 0
        npm ci
        npm run build
    - name: Set Kubernetes Context
      uses: azure/k8s-set-context@v1
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG }}
    - name: Generate namespace name
      id: generate
      uses: filipstefansson/uuid-action@v1
      with:
        name: ${{ github.sha }}
    - name: Deploy to k8s
      shell: bash
      working-directory: blockscout-ci-cd/blockscout
      # port forwarding works only inside the step, consider refactoring as TS action
      env:
        NAMESPACE_NAME: e2e-geth-${{ steps.generate.outputs.uuid }}
      run: |
        mkdir ~/.ssh
        ssh-keyscan -H $BASTION_HOST >> ~/.ssh/known_hosts
        eval `ssh-agent -s`
        ssh-add - <<< "$BASTION_SSH_KEY"
        sudo echo "127.0.0.1 $K8S_HOST" | sudo tee -a /etc/hosts
        ssh -fN -v -L $K8S_LOCAL_PORT:$K8S_HOST:$K8S_PORT $USERNAME@$BASTION_HOST
        npm ci
        npm run start
    - name: Cache playwright binaries
      uses: actions/cache@v2
      id: playwright-cache
      with:
        path: |
          ~/.cache/ms-playwright
        key: ${{ runner.os }}-build-${{ env.cache-name }}
        restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Install Playwright
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install --with-deps
    - name: Run playwright smoke suite
      run: |
        npm run test:smoke:account
    - name: Run playwright verification suite
      run: |
        npm run test:smoke:verification
    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: report
        path: blockscout-ci-cd/tests/e2e/html-report/index.html
    - name: Analyze Test and/or Coverage Results
      uses: runforesight/foresight-test-kit-action@v1
      if: always()
      with:
        api_key: ${{ secrets.THUNDRA_APIKEY }}
        test_format: JUNIT
        test_framework: JEST
        test_path: blockscout-ci-cd/tests/e2e/results.xml
    - name: Remove namespace
      if: always()
      working-directory: blockscout-ci-cd/blockscout
      env:
        NAMESPACE_NAME: e2e-geth-${{ steps.generate.outputs.uuid }}
      run: |
        eval `ssh-agent -s`
        ssh-add - <<< "$BASTION_SSH_KEY"
        ssh -fN -v -L $K8S_LOCAL_PORT:$K8S_HOST:$K8S_PORT $USERNAME@$BASTION_HOST
        npm run stop
defaults:
  run:
    shell: bash
    working-directory: blockscout-ci-cd/tests/e2e