name: Deploy blockscout-stack

on:
  workflow_call:
    inputs:
      appName:
        description: 'Name of application to deploy'
        required: true
        default: ''
        type: string
      globalEnv:
        description: 'Environment Name'
        required: true
        default: 'testing'
        type: string
      helmfileDir:
        description: 'Directory to run helmfile'
        required: false
        default: '.'
        type: string
      kubeConfigSecret:
        description: 'Path to kubeconfig in vault'
        required: true
        default: ''
        type: string
      vaultRole:
        description: 'Role to authenticate in vault'
        required: true
        default: ''
        type: string

jobs:
  deploy:
    name: Deploy
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4

      - name: Configure Kubectl
        uses: azure/setup-kubectl@v2.0
        with:
          version: 'v1.25.4'
        id: install

      # Install helm, helm-secrets, sops
      - name: Install tools
        shell: bash
        run: |
          curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
          sudo apt-get install apt-transport-https --yes
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
          sudo apt-get update -y
          sudo apt-get install helm gnupg -y
          helm plugin install https://github.com/jkroepke/helm-secrets
          helm plugin install https://github.com/databus23/helm-diff
          cd /tmp
          curl -O -L -C - https://github.com/helmfile/helmfile/releases/download/v0.153.1/helmfile_0.153.1_linux_amd64.tar.gz
          tar -xzvf helmfile_0.153.1_linux_amd64.tar.gz
          sudo mv helmfile /usr/bin/helmfile
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Get Vault credentials
        id: retrieve-vault-secrets
        uses: hashicorp/vault-action@v2.4.1
        with:
          url: https://vault.k8s.blockscout.com
          role: ${{ inputs.vaultRole }}
          path: github-jwt
          method: jwt
          tlsSkipVerify: false
          exportToken: true
          secrets: |
            ${{ inputs.kubeConfigSecret }} kubeconfig | KUBECONFIG_BASE64 ;
      - name: Check GitHub deployment name
        if: ${{ inputs.globalEnv == 'review' }}
        id: deployment-name
        shell: bash
        run: |
          cd ${{ inputs.helmfileDir }}
          helmfile -e ${{ inputs.globalEnv }} -l app=${{ inputs.appName }} write-values --output-file-template "{{ .State.BaseName }}/{{ .Release.Name}}.yaml"
          echo
          echo "DEPLOYMENT_URL=https://$(cat helmfile/bs-stack.yaml|yq '.frontend.ingress.host._default')" >> "$GITHUB_ENV"

      - uses: chrnorm/deployment-action@v2
        name: Create GitHub deployment
        if: ${{ inputs.globalEnv == 'review' }}
        id: deployment
        with:
          token: '${{ github.token }}'
          environment-url: ${{env.DEPLOYMENT_URL}}
          environment: review
          auto-inactive: false

      # Deploy newly built changes to EKS cluster.
      - name: Deploy
        shell: bash
        run: |
          mkdir -p ~/.kube
          echo $KUBECONFIG_BASE64 | base64 --decode > ~/.kube/config
          chmod 600 ~/.kube/config
          cd ${{ inputs.helmfileDir }}
          helmfile -e ${{ inputs.globalEnv }} -l app=${{ inputs.appName }} apply --suppress-diff

      - name: Update deployment status (success)
        if: ${{ success() && inputs.globalEnv == 'review' }}
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{env.DEPLOYMENT_URL}}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: 'success'
          auto-inactive: false

      - name: Update deployment status (failure)
        if: ${{ failure() && inputs.globalEnv == 'review' }}
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{env.DEPLOYMENT_URL}}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: 'failure'