name: Deploy blockscout-stack

# run-name: Deploy to ${{ inputs.appNamespace }} by @${{ github.actor }}
on:
  # push:
  workflow_dispatch:
    inputs:
      env_vars:
        description: VALUES_DIR=charts/blockscout-stack/values/e2e,APP_NAME=bs-stack,DOCKER_IMAGE=1,APP=app-name
        required: false
        type: string
      globalEnv:
        description: 'Network type'
        required: false
        default: '_default'
        type: string
      # valuesDir:
      #   description: 'Directory with values'
      #   required: true
      #   default: 'charts/blockscout-stack/values/e2e'
      #   type: string
      # appName:
      #   description: 'App name'
      #   required: true
      #   default: 'bs-stack'
      #   type: string
      appNamespace:
        description: 'Namespace to deploy in'
        required: false
        type: string
      blockscoutImage:
        description: 'Blockscout image'
        required: false
        type: string
      blockscoutIngressHost:
        description: 'Blockscout url'
        required: false
        type: string
      frontendImage:
        description: 'Frontend image'
        required: false
        type: string
      frontendIngressHost:
        description: 'Frontend url'
        required: false
        type: string
      scVerifierImage:
        description: 'Smart-contract-verifier image'
        required: false
        type: string
      scVerifierIngressHost:
        description: 'Smart-contract-verifier url'
        required: false
        type: string
      gethIngressHost:
        description: 'Geth node url'
        required: false
        type: string
  workflow_call:
    inputs:
      env_vars:
        description: VALUES_DIR=charts/blockscout-stack/values/e2e,APP_NAME=bs-stack,DOCKER_IMAGE=1,APP=app-name
        required: false
        type: string
      globalEnv:
        description: 'Network type'
        required: false
        default: '_default'
        type: string
      # valuesDir:
      #   description: 'Directory with values'
      #   required: true
      #   default: 'charts/blockscout-stack/values/e2e'
      #   type: string
      # appName:
      #   description: 'App name'
      #   required: false
      #   default: 'bs-stack'
      #   type: string
      appNamespace:
        description: 'Namespace to deploy in'
        required: false
        type: string
      blockscoutImage:
        description: 'Blockscout image'
        required: false
        type: string
      blockscoutIngressHost:
        description: 'Blockscout url'
        required: false
        type: string
      frontendImage:
        description: 'Frontend image'
        required: false
        type: string
      frontendIngressHost:
        description: 'Frontend url'
        required: false
        type: string
      scVerifierImage:
        description: 'Smart-contract-verifier image'
        required: false
        type: string
      scVerifierIngressHost:
        description: 'Smart-contract-verifier url'
        required: false
        type: string
      gethIngressHost:
        description: 'Geth node url'
        required: false
        type: string

env:
  K8S_LOCAL_PORT: ${{ secrets.K8S_LOCAL_PORT }}
  K8S_HOST: ${{ secrets.K8S_HOST }}
  BASTION_HOST: ${{ secrets.BASTION_HOST }}
  K8S_PORT: ${{ secrets.K8S_PORT }}
  USERNAME: ${{ secrets.USERNAME }}
  BASTION_SSH_KEY: ${{secrets.BASTION_SSH_KEY}}
  K8S_DOMAIN: test.aws-k8s.blockscout.com
  REGION: us-east-1

jobs:
  deploy:
    name: Deploy ${{ inputs.appNamespace }}
    permissions: write-all
    # permissions:
    #   id-token: write
    #   contents: read
    runs-on: ubuntu-latest
    # strategy:
    #   fail-fast: true
    #   max-parallel: 1
      # matrix:
      #   environment: [Dev]
      #   region: [us-east-1]
    # environment:
    #   name: Dev
      # url:  ${{ steps.deploy-args.outputs.app_url }}
      #https://${{ inputs.appNamespace }}.${{ env.K8S_DOMAIN }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4

      - name: Set environment variables
        run: |
          env_vars=${{ inputs.env_vars }}
          for i in ${env_vars//,/ }
          do
              echo "$i" >> $GITHUB_ENV
              echo "${{ inputs.appNamespace }}.${{ env.K8S_DOMAIN }}"
          done

      # - name: Add inputs to GITHUB_ENV
      #   if: "${{ inputs.valuesDir != '' && inputs.appName != '' }}"
      #   run: |
      #     echo "VALUES_DIR=${{ inputs.valuesDir }}" >> $GITHUB_ENV
      #     echo "APP_NAME=${{ inputs.appName }}" >> $GITHUB_ENV

      - name: Generate namespace name
        if: "${{ inputs.appNamespace == '' }}"
        id: generate
        uses: filipstefansson/uuid-action@v1
        with:
          name: ${{ github.sha }}

      - name: Set APP_NAMESPACE
        run: |
          if ${{ inputs.appNamespace != '' }}; then
              echo "APP_NAMESPACE=${{ inputs.appNamespace }}" >> "$GITHUB_ENV"
          else
              echo "APP_NAMESPACE=bs-${{ steps.generate.outputs.uuid }}" >> "$GITHUB_ENV"
          fi

      - name: Configure Kubectl
        uses: azure/setup-kubectl@v2.0
        with:
          version: 'v1.23.6'
        id: install

      # This action will use the GitHub OIDC id-token and request AWS STS to get temporary credentials.
      # The temporary credentials are exported as env variables.
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.REGION }}
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}

      # Install helm, helm-secrets, sops
      - name: Install helm and helm-secrets, sops
        shell: bash
        run: |
          curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
          sudo apt-get install apt-transport-https --yes
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
          sudo apt-get update -y
          sudo apt-get install helm gnupg -y
          helm plugin install https://github.com/jkroepke/helm-secrets
          curl -O -L -C - https://github.com/mozilla/sops/releases/download/v3.7.3/sops-v3.7.3.linux
          sudo mv sops-v3.7.3.linux /usr/bin/sops
          sudo chmod +x /usr/bin/sops

      # The following command will update the kube config file with our cluster information.
      # It will use the credentials exported by the previous action.
      - name: Update KubeConfig
        shell: bash
        run: |
          aws eks update-kubeconfig --name ${{ secrets.AWS_CLUSTER_NAME }} --region=${{ env.REGION }}

      # Import GPG key
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          fingerprint: ${{ secrets.GPG_FINGERPRINT }}
          passphrase: ''

      - name: Deploy args
        id: deploy-args
        shell: bash
        run: |
          echo $DEPLOY_ARGS
          if ${{ env.GITHUB_REF_SLUG == 'main' }}; then
            DEPLOY_SUFFIX=$GITHUB_REF_SLUG
          else
            DEPLOY_SUFFIX=$GITHUB_REF_SLUG
          fi
          echo "DEPLOY_SUFFIX=$DEPLOY_SUFFIX" >> "$GITHUB_ENV"
          if ${{ inputs.globalEnv != '' }}; then
            DEPLOY_ARGS="$DEPLOY_ARGS--set global.env=${{ inputs.globalEnv }} "
          fi
          if ${{ env.DOCKER_IMAGE != '' }}; then
            DEPLOY_ARGS="$DEPLOY_ARGS--set $APP.image.${{ inputs.globalEnv }}=$DOCKER_IMAGE "
          fi
          if ${{ inputs.frontendImage != '' }}; then
            DEPLOY_ARGS="$DEPLOY_ARGS--set frontend.image._default=${{ inputs.frontendImage }} "
          fi
          if ${{ inputs.frontendIngressHost != '' }}; then
            FRONTEND_INGRESS_URL=${{ inputs.frontendIngressHost }}-$DEPLOY_SUFFIX.$K8S_DOMAIN
            FRONTEND_URL=https://$FRONTEND_INGRESS_URL
            echo "FRONTEND_URL=$FRONTEND_URL" >> "$GITHUB_ENV"
            DEPLOY_ARGS="$DEPLOY_ARGS--set frontend.ingress.host._default=$FRONTEND_INGRESS_URL "
            DEPLOY_ARGS="$DEPLOY_ARGS--set frontend.environment.NEXT_PUBLIC_APP_HOST._default=$FRONTEND_INGRESS_URL "
          fi
          if ${{ inputs.blockscoutImage != '' }}; then
            DEPLOY_ARGS="$DEPLOY_ARGS--set blockscout.image._default=${{ inputs.blockscoutImage }} "
          fi
          if ${{ inputs.blockscoutIngressHost != '' }}; then
            DEPLOY_ARGS="$DEPLOY_ARGS--set blockscout.environment.ACCOUNT_AUTH0_CALLBACK_URL._default=http://${{ inputs.blockscoutIngressHost }}-$DEPLOY_SUFFIX.$K8S_DOMAIN/auth/auth0/callback "
            DEPLOY_ARGS="$DEPLOY_ARGS--set blockscout.environment.ACCOUNT_AUTH0_LOGOUT_RETURN_URL._default=http://${{ inputs.blockscoutIngressHost }}-$DEPLOY_SUFFIX.$K8S_DOMAIN/auth/logout "
            DEPLOY_ARGS="$DEPLOY_ARGS--set frontend.environment.NEXT_PUBLIC_LOGOUT_RETURN_URL._default=http://${{ inputs.blockscoutIngressHost }}-$DEPLOY_SUFFIX.$K8S_DOMAIN/auth/logout "
            BLOCKSCOUT_URL=https://${{ inputs.blockscoutIngressHost }}-$DEPLOY_SUFFIX.$K8S_DOMAIN
            DEPLOY_ARGS="$DEPLOY_ARGS--set blockscout.ingress.host._default=${{ inputs.blockscoutIngressHost }}-$DEPLOY_SUFFIX.$K8S_DOMAIN "
            DEPLOY_ARGS="$DEPLOY_ARGS--set frontend.environment.NEXT_PUBLIC_API_HOST._default=${{ inputs.blockscoutIngressHost }}-$DEPLOY_SUFFIX.$K8S_DOMAIN "
            echo "BLOCKSCOUT_URL=$BLOCKSCOUT_URL" >> "$GITHUB_ENV"
            echo "::set-output name=app_url::$BLOCKSCOUT_URL"
          fi
          if ${{ inputs.scVerifierImage != '' }}; then
            DEPLOY_ARGS="$DEPLOY_ARGS--set scVerifier.image._default=${{ inputs.scVerifierImage }} "
          fi
          if ${{ inputs.scVerifierIngressHost != '' }}; then
            SC_VERIFIER_URL=https://${{ inputs.scVerifierIngressHost }}-$DEPLOY_SUFFIX.$K8S_DOMAIN
            echo "SC_VERIFIER_URL=$SC_VERIFIER_URL" >> "$GITHUB_ENV"
            DEPLOY_ARGS="$DEPLOY_ARGS--set scVerifier.ingress.host._default=${{ inputs.scVerifierIngressHost }}-$DEPLOY_SUFFIX.$K8S_DOMAIN "
          fi
          if ${{ inputs.gethIngressHost != '' }}; then
            NETWORK_URL=${{ inputs.gethIngressHost }}-$DEPLOY_SUFFIX.$K8S_DOMAIN/http
            echo "NETWORK_URL=http://$NETWORK_URL" >> "$GITHUB_ENV"
            DEPLOY_ARGS="$DEPLOY_ARGS--set geth.ingress.host._default=${{ inputs.gethIngressHost }}-$DEPLOY_SUFFIX.$K8S_DOMAIN "
          fi
          echo "$DEPLOY_ARGS"
          echo "DEPLOY_ARGS=$DEPLOY_ARGS" >> "$GITHUB_ENV"

      - name: Check GitHub deployment name
        id: deployment-name
        shell: bash
        run: |
          echo $DEPLOY_ARGS
          if ${{ env.GITHUB_REF_SLUG == 'main' }}; then
            DEPLOYMENT_NAME=$GITHUB_REF_SLUG
          else
            DEPLOYMENT_NAME=review
          fi
          echo "DEPLOYMENT_NAME=$DEPLOYMENT_NAME" >> "$GITHUB_ENV"

      - uses: chrnorm/deployment-action@v2
        name: Create GitHub deployment
        id: deployment
        with:
          token: '${{ github.token }}'
          environment-url: ${{env.BLOCKSCOUT_URL}}
          environment: ${{env.DEPLOYMENT_NAME}}
          auto-inactive: false

      # Deploy newly built changes to EKS cluster.
      - name: Deploy To Cluster
        shell: bash
        run: |
          mkdir ~/.ssh
          ssh-keyscan -H $BASTION_HOST >> ~/.ssh/known_hosts
          eval `ssh-agent -s`
          ssh-add - <<< "$BASTION_SSH_KEY"
          sudo echo "127.0.0.1 $K8S_HOST" | sudo tee -a /etc/hosts
          sed -i 's/eks.amazonaws.com/eks.amazonaws.com:9443/g' ~/.kube/config
          ssh -fN -v -L $K8S_LOCAL_PORT:$K8S_HOST:$K8S_PORT $USERNAME@$BASTION_HOST
          helm secrets upgrade --install --repo https://blockscout.github.io/blockscout-ci-cd/ \
            $APP_NAME blockscout-stack \
            -f $VALUES_DIR/values.yaml \
            -f $VALUES_DIR/secrets.yaml \
            $DEPLOY_ARGS \
            -n $APP_NAMESPACE --create-namespace

      # Copy registry secret if private docker repo
      - name: Copy private registry secret
        # if: github.repository == 'blockscout/frontend'
        shell: bash
        run: |
          kubectl delete secret regcred -n $APP_NAMESPACE --ignore-not-found
          kubectl get secret regcred -o yaml | sed "s/namespace: .*/namespace: $APP_NAMESPACE/" | kubectl apply -f -

      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{env.BLOCKSCOUT_URL}}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: 'success'
          auto-inactive: false

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{env.BLOCKSCOUT_URL}}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: 'failure'

      # Show app URLs
      - name: Print URLs of blockscout-stack
        shell: bash
        run: |
          echo "Your Blockscout app is here:" > urls.txt
          echo "$BLOCKSCOUT_URL" >> urls.txt
          echo "Your Frontend app is here:" >> urls.txt
          echo "$FRONTEND_URL" >> urls.txt
          echo "Your Smart-contract-verifier app is here:" >> urls.txt
          echo "$SC_VERIFIER_URL" >> urls.txt
          echo "Your geth app is here:" >> urls.txt
          echo "$NETWORK_URL" >> urls.txt
          cat urls.txt

      # check if instance is ready
      - name: Check the deployed service URL
        if: "${{ env.BLOCKSCOUT_URL != '' }}"
        uses: jtalk/url-health-check-action@v2
        with:
          # Check the following URLs one by one sequentially
          url: ${{ env.BLOCKSCOUT_URL }}
          #
          # Follow redirects, or just report success on 3xx status codes
          follow-redirect: false # Optional, defaults to "false"
          # Fail this action after this many failed attempts
          max-attempts: 30 # Optional, defaults to 1
          # Delay between retries
          retry-delay: 20s # Optional, only applicable to max-attempts > 1
          # Retry all errors, including 404. This option might trigger curl upgrade.
          retry-all: true # Optional, defaults to "false"
